{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["correct_word","data","Math","floor","random","length","toLowerCase","post","head","body","arm_1","arm_2","leg_1","leg_2","Game","props","state","wrong","word","repeat","already","str","v","disabled","len","handle","bind","reset","Change","this","includes","setState","e","regex","RegExp","key","target","value","test","indexes","split","map","item","index","Number","Regex","already_guessed","y","slice","console","log","x","push","total","join","i","hung","string","hang","id","onClick","class","style","textAlign","fontSize","position","bottom","right","href","rel","color","margin","ref","input","maxLength","minLength","spellCheck","autoComplete","type","className","placeholder","onKeyDown","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54372f27.chunk.js","sourcesContent":["import React from 'react';\nimport data from './data.json';\nimport './App.css';\n\nlet correct_word = data[Math.floor(Math.random() * data.length)].toLowerCase()\nconst post = [\n'|-------:-- ',\n'        : ',\n'',\n'',\n'',\n'',\n''\n]\nconst head = [\n  '|-------:--',\n  '( )',\n  '        ',\n  '',\n  '',\n  '',\n  '',\n]\nconst body = [\n'|-------:--',\n'( )',\n'       | ',\n'',\n'',\n'',\n'',\n]\nconst arm_1 = [\n\"|-------:--\",\n\"( )\",\n\"/|\",\n\"\",\n\"\",\n\"\",\n\"\",\n]\nconst arm_2 = [\n\"|-------:--\",\n\"( )\",\n\"/|\\\\\",\n\"     \",\n\"\",\n\"\",\n\"\",\n]\nconst leg_1 = [\n\"|-------:--\",\n\"( )\",\n\"/|\\\\\",\n\"/\",\n\"\",\n\"\",\n\"\",]\nconst leg_2 = [\n\"|-------:--\",\n\"( )\",\n\"/|\\\\\",\n\"/ \\\\\",\n\"\",\n\"\",\n\"\",\n]\n\nclass Game extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {wrong: 0,\n                  word: \"_ \".repeat(correct_word.length),\n                  already: [],\n                  str: \"\",\n                  v: \"\",};\n    this.disabled = false;\n    this.len = 0;\n    this.handle = this.handle.bind(this);\n    this.reset = this.reset.bind(this);\n    this.Change = this.Change.bind(this);\n  }\n\n  string() {\n    if (!this.state.word.includes(\"_\")) {\n      this.setState({ str: \"You won! Click the reset button to try again.\" });\n      this.disabled = true;\n    }\n    if (this.state.wrong === 6) {\n      this.setState({ str: `You lost... The correct word was ${correct_word}. Click the reset button to try again.` });\n      this.disabled = true;\n    }\n    switch (this.state.wrong){\n      case 0:\n        return post;\n      case 1:\n        return head;\n      case 2:\n        return body;\n      case 3:\n        return arm_1;\n      case 4:\n        return arm_2;\n      case 5:\n        return leg_1;\n      default:\n        return leg_2;\n    }\n  }\n  \n  reset() {\n    this.setState({wrong: 0,\n      word: \"_ \".repeat(correct_word.length),\n      already: [],\n      str: \"\",\n      v: \"\",})\n    this.len = 0;\n    correct_word = data[Math.floor(Math.random() * data.length)];\n    this.disabled = false;\n  }\n  \n  handle(e) {\n    const regex = new RegExp(\"[A-Za-z]+\");\n    if (e.key === \"Enter\"){\n      if (this.state.str.length > 0) {\n        this.setState({ str: \"\"});\n      }\n      if (e.target.value === \"\") {\n        this.setState({ str: \"Actually put something in this time...\" });\n        this.setState({ v: \"\" });\n        return ;\n      }\n      else if (this.state.already.includes(e.target.value)) {\n        this.setState({ str: \"Try a word or letter that hasn't been used before\"});\n        this.setState({ v: \"\" });\n        return ;\n      }\n      else if (!regex.test(e.target.value)) {\n        this.setState({ str: \"Try inputting letters or words without any special characters or numbers\" });\n        this.setState({ v: \"\" });\n        return ;\n      }\n      this.setState({ v: \"\" })\n      this.setState({ already: this.state.already + e.target.value});\n      if (e.target.value.length === 1) {\n        if (correct_word.includes(e.target.value)) {\n          let indexes = [];\n          let i = [];\n          indexes = correct_word.split(\"\").map((item, index) => {i = item === e.target.value ? Number(index): \"\"; return i;});\n          const Regex = new RegExp(\"[_ ]\");\n          let already_guessed = [];\n          let y = 0;\n          let word = this.state.word.split(\" \").slice(0, -1);\n          console.log(word)\n          for (let x of word) {\n            if (!Regex.test(x)) {\n              already_guessed.push(y);\n            }\n            y = y + 1;\n          };\n          console.log(already_guessed);\n          let total = indexes + already_guessed;\n          this.setState({ word: correct_word.split(\"\").map((item, index) =>  total.includes(index) ? item + \" \": \"_ \").join(\"\")});\n        }\n        else {\n          this.setState({ wrong: this.state.wrong + 1 });\n          this.setState({ str: \"You got it wrong... Better luck next time!\" });\n        }\n      }\n      else {\n        if (e.target.value === correct_word) {\n          this.setState({ str: \"You won! Click the reset button to try again.\" });\n          this.disabled = true;\n        }\n        else {\n          this.setState({ str: \"You got it wrong... Better luck next time!\"});\n          this.setState({ wrong: this.state.wrong + 1});\n        }\n      }\n    }\n      \n  }\n\n  Change(e) {\n    this.setState({ v: e.target.value})\n  }\n\n  render() {\n    const hung = this.string();\n    let i;\n    let hang = [];\n    for (i=0;i<hung.length;i++){\n      hang.push(i ? <p>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{hung[i]}</p>: <p>{hung[i]}</p>);\n    }\n    return (\n      <div id='center'>\n        <button onClick={this.reset} class=\"button button2\" style={{textAlign: \"left\", }}>Reset</button>\n        <div id=\"flex\" style={{fontSize: 90, }}>{hang}</div>\n        <p style={{fontSize: 90, position: 'absolute', bottom: 130, right: 50,}}>{this.state.word}</p>\n        <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"/>\n        <p style={{color: \"red\", margin: 43}}>{this.state.str}</p>\n        <div id='already'>\n          <ul>\n          </ul>\n        </div>\n        <div id='input'>\n          <input disabled={this.disabled}\n                 value={this.state.v}\n                 ref={this.input}\n                 maxLength=\"21\"\n                 minLength=\"1\"\n                 spellCheck=\"false\"\n                 autoComplete=\"off\"\n                 type=\"text\"\n                 className=\"form__input\"\n                 id=\"name\" \n                 placeholder=\"Guess a word or letter\"\n                 onKeyDown={this.handle}\n                 onChange={this.Change}\n            />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}